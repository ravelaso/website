@page "/"
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Andres Ravelo - Musician, Developer & Photographer</PageTitle>

<section class="relative bg-black min-h-screen flex items-center justify-center overflow-hidden" id="hero-section">
    <!-- Background Pattern -->
    <div class="absolute inset-0 opacity-10 bg-gradient-to-r from-gray-900 to-gray-800">
        <div class="absolute inset-0" style="background-image: radial-gradient(circle at 2px 2px, white 1px, transparent 0); background-size: 80px 80px;"></div>
    </div>

    <!-- Floating Elements Container -->
    <div id="floating-elements" class="absolute inset-0 pointer-events-none">
        @foreach (var element in _floatingElements)
        {
            <div class="floating-element absolute @element.OpacityClass @element.ColorClass"
                 style="top: @(element.Top)%; left: @(element.Left)%;">
                <svg class="@element.SizeClass" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    @((MarkupString)element.SvgPath)
                </svg>
            </div>
        }
    </div>

    <div class="relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-6xl mx-auto">
        <!-- Main Title -->
        <div class="mb-16 text-center">
            <h1 class="text-6xl sm:text-7xl lg:text-8xl font-black text-white mb-8 tracking-tight">
                <span class="block font-extralight text-gray-300">ANDRES</span>
                <span class="block bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                    RAVELO
                </span>
            </h1>

            <!-- Interactive Role Buttons -->
            <div class="flex flex-wrap justify-center gap-6 text-lg sm:text-xl font-medium mb-12">
                <a href="/music" class="group flex items-center px-6 py-3 rounded-full border-2 border-gray-600 hover:border-white transition-all duration-300 hover:bg-white/5">
                    <div class="w-10 h-10 mr-4 rounded-full border border-gray-500 group-hover:border-white flex items-center justify-center transition-all duration-300">
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-white transition-colors duration-300" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M18 3a1 1 0 00-1.196-.98l-10 2A1 1 0 006 5v9.114A4.369 4.369 0 005 14c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2V7.82l8-1.6v5.894A4.369 4.369 0 0015 12c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2V3z"/>
                        </svg>
                    </div>
                    <span class="text-gray-300 group-hover:text-white transition-colors duration-300">Musician</span>
                </a>

                <a href="/developer" class="group flex items-center px-6 py-3 rounded-full border-2 border-gray-600 hover:border-white transition-all duration-300 hover:bg-white/5">
                    <div class="w-10 h-10 mr-4 rounded-full border border-gray-500 group-hover:border-white flex items-center justify-center transition-all duration-300">
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-white transition-colors duration-300" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <span class="text-gray-300 group-hover:text-white transition-colors duration-300">Developer</span>
                </a>

                <a href="/photography" class="group flex items-center px-6 py-3 rounded-full border-2 border-gray-600 hover:border-white transition-all duration-300 hover:bg-white/5">
                    <div class="w-10 h-10 mr-4 rounded-full border border-gray-500 group-hover:border-white flex items-center justify-center transition-all duration-300">
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-white transition-colors duration-300" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <span class="text-gray-300 group-hover:text-white transition-colors duration-300">Photographer</span>
                </a>
            </div>
        </div>
    </div>
</section>

<style>
    .floating-element {
        will-change: transform, left, top;
        transition: filter 0.15s ease-out, transform 0.15s ease-out;
    }
</style>

<script>
    window.heroAnimation = {
        animationState: null,

        init: function() {
            console.log('🚀 Initializing hero animation...');

            // Clean up any existing animation
            if (this.animationState) {
                this.cleanup();
            }

            const heroSection = document.getElementById('hero-section');
            const floatingElements = document.querySelectorAll('.floating-element');

            if (!heroSection || floatingElements.length === 0) {
                console.log('❌ Hero section or floating elements not found');
                return false;
            }

            // Configuration
            const CONFIG = {
                INITIAL_VELOCITY: 0.03,
                MAX_SPEED: 0.08,
                FRICTION: 0.895,
                RETURN_FORCE: 0.003,
                BOUNDARY_PUSH: 0.005,
                COLLISION_RADIUS: 3,
                COLLISION_FORCE: 0.02,
                MOUSE_DISTANCE: 10,
                MOUSE_REPEL_FORCE: 0.05,
                GLOW_MAX_SIZE: 40,
                SCALE_MAX: 0.2,
                TARGET_FPS: 60,
                BOUNDARY_MARGIN: 5,
                ICON_COUNT: {
                    mobile: 8,
                    tablet: 15,
                    desktop: 35,
                    large: 50
                }
            };

            function getDeviceType() {
                const width = window.innerWidth;
                if (width < 640) return 'mobile';
                if (width < 1024) return 'tablet';
                if (width < 1440) return 'desktop';
                return 'large';
            }

            // Responsive icon management
            const targetIconCount = CONFIG.ICON_COUNT[getDeviceType()];
            const visibleElements = Array.from(floatingElements).slice(0, targetIconCount);

            // Hide excess elements
            floatingElements.forEach((el, index) => {
                el.style.display = index < targetIconCount ? '' : 'none';
            });

            console.log(`📱 Device: ${getDeviceType()}, Showing ${visibleElements.length} icons`);

            // Element data cache
            const elementsData = visibleElements.map((element, index) => ({
                element,
                id: index,
                x: parseFloat(element.style.left) || Math.random() * 90 + 5,
                y: parseFloat(element.style.top) || Math.random() * 90 + 5,
                vx: (Math.random() - 0.5) * CONFIG.INITIAL_VELOCITY,
                vy: (Math.random() - 0.5) * CONFIG.INITIAL_VELOCITY,
                radius: CONFIG.COLLISION_RADIUS,
                originalX: parseFloat(element.style.left) || Math.random() * 90 + 5,
                originalY: parseFloat(element.style.top) || Math.random() * 90 + 5
            }));

            // Set initial positions
            elementsData.forEach(data => {
                data.element.style.left = `${data.x}%`;
                data.element.style.top = `${data.y}%`;
            });

            // Animation state
            let animationId = null;
            let lastTime = 0;
            const frameTime = 1000 / CONFIG.TARGET_FPS;
            let mouseX = 0, mouseY = 0, isMouseMoving = false;

            // Mobile optimizations
            const deviceType = getDeviceType();
            if (deviceType === 'mobile') {
                CONFIG.INITIAL_VELOCITY *= 0.5;
                CONFIG.MAX_SPEED *= 0.5;
                CONFIG.MOUSE_REPEL_FORCE *= 0.5;
            }

            // Animation functions
            function updatePositions() {
                elementsData.forEach(data => {
                    const dx = data.originalX - data.x;
                    const dy = data.originalY - data.y;

                    data.vx += dx * CONFIG.RETURN_FORCE;
                    data.vy += dy * CONFIG.RETURN_FORCE;
                    data.vx *= CONFIG.FRICTION;
                    data.vy *= CONFIG.FRICTION;

                    data.x += data.vx;
                    data.y += data.vy;

                    // Boundary constraints
                    if (data.x < CONFIG.BOUNDARY_MARGIN) {
                        data.vx += (CONFIG.BOUNDARY_MARGIN - data.x) * CONFIG.BOUNDARY_PUSH;
                    }
                    if (data.x > 95 - CONFIG.BOUNDARY_MARGIN) {
                        data.vx -= (data.x - (95 - CONFIG.BOUNDARY_MARGIN)) * CONFIG.BOUNDARY_PUSH;
                    }
                    if (data.y < CONFIG.BOUNDARY_MARGIN) {
                        data.vy += (CONFIG.BOUNDARY_MARGIN - data.y) * CONFIG.BOUNDARY_PUSH;
                    }
                    if (data.y > 95 - CONFIG.BOUNDARY_MARGIN) {
                        data.vy -= (data.y - (95 - CONFIG.BOUNDARY_MARGIN)) * CONFIG.BOUNDARY_PUSH;
                    }

                    data.element.style.left = `${data.x}%`;
                    data.element.style.top = `${data.y}%`;
                });
            }

            function checkCollisions() {
                for (let i = 0; i < elementsData.length; i++) {
                    for (let j = i + 1; j < elementsData.length; j++) {
                        const a = elementsData[i];
                        const b = elementsData[j];
                        const dx = a.x - b.x;
                        const dy = a.y - b.y;
                        const distance = Math.sqrt(dx * dx + dy * dy);

                        if (distance < a.radius) {
                            const angle = Math.atan2(dy, dx);
                            a.vx += Math.cos(angle) * CONFIG.COLLISION_FORCE;
                            a.vy += Math.sin(angle) * CONFIG.COLLISION_FORCE;
                            b.vx -= Math.cos(angle) * CONFIG.COLLISION_FORCE;
                            b.vy -= Math.sin(angle) * CONFIG.COLLISION_FORCE;

                            // Limit velocity
                            a.vx = Math.max(-CONFIG.MAX_SPEED, Math.min(CONFIG.MAX_SPEED, a.vx));
                            a.vy = Math.max(-CONFIG.MAX_SPEED, Math.min(CONFIG.MAX_SPEED, a.vy));
                            b.vx = Math.max(-CONFIG.MAX_SPEED, Math.min(CONFIG.MAX_SPEED, b.vx));
                            b.vy = Math.max(-CONFIG.MAX_SPEED, Math.min(CONFIG.MAX_SPEED, b.vy));
                        }
                    }
                }
            }

            function animate(currentTime) {
                if (currentTime - lastTime >= frameTime) {
                    updatePositions();
                    checkCollisions();
                    lastTime = currentTime;
                }
                animationId = requestAnimationFrame(animate);
            }

            function updateMouseEffects() {
                if (!isMouseMoving) return;

                elementsData.forEach(data => {
                    const dx = mouseX - data.x;
                    const dy = mouseY - data.y;
                    const distance = Math.sqrt(dx * dx + dy * dy);

                    if (distance < CONFIG.MOUSE_DISTANCE) {
                        const intensity = Math.max(0, (CONFIG.MOUSE_DISTANCE - distance) / CONFIG.MOUSE_DISTANCE);
                        const glowSize = Math.round(intensity * CONFIG.GLOW_MAX_SIZE);
                        const opacity = intensity * 2;
                        const brightness = 1 + intensity * 2;
                        const scale = 1 + intensity * CONFIG.SCALE_MAX;

                        data.element.style.filter = `
                            drop-shadow(0 0 ${glowSize}px rgba(0, 150, 255, ${opacity}))
                            drop-shadow(0 0 ${glowSize * 1.5}px rgba(100, 200, 255, ${opacity * 0.8}))
                            brightness(${brightness})
                        `;
                        data.element.style.transform = `scale(${scale})`;
                        data.element.style.transition = 'none';

                        const angle = Math.atan2(data.y - mouseY, data.x - mouseX);
                        data.vx += Math.cos(angle) * CONFIG.MOUSE_REPEL_FORCE * intensity;
                        data.vy += Math.sin(angle) * CONFIG.MOUSE_REPEL_FORCE * intensity;
                    } else {
                        data.element.style.filter = '';
                        data.element.style.transform = '';
                        data.element.style.transition = 'filter 0.15s ease-out, transform 0.15s ease-out';
                    }
                });

                isMouseMoving = false;
            }

            // Event handlers
            function handleMouseMove(e) {
                const rect = heroSection.getBoundingClientRect();
                mouseX = ((e.clientX - rect.left) / rect.width) * 100;
                mouseY = ((e.clientY - rect.top) / rect.height) * 100;
                isMouseMoving = true;
                requestAnimationFrame(updateMouseEffects);
            }

            function handleMouseLeave() {
                elementsData.forEach(data => {
                    data.element.style.filter = '';
                    data.element.style.transform = '';
                    data.element.style.transition = 'filter 0.2s ease-out, transform 0.2s ease-out';
                });
            }

            let resizeTimeout;
            function handleResize() {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    heroAnimation.init(); // Reinitialize on resize
                }, 250);
            }

            // Add event listeners
            heroSection.addEventListener('mousemove', handleMouseMove);
            heroSection.addEventListener('mouseleave', handleMouseLeave);
            window.addEventListener('resize', handleResize);

            // Start animation
            animate(0);

            // Store state for cleanup
            this.animationState = {
                animationId,
                heroSection,
                elementsData,
                handleMouseMove,
                handleMouseLeave,
                handleResize
            };

            console.log('✅ Hero animation initialized successfully!');
            return true;
        },

        cleanup: function() {
            console.log('🧹 Cleaning up hero animation...');

            if (this.animationState) {
                const { animationId, heroSection, elementsData, handleMouseMove, handleMouseLeave, handleResize } = this.animationState;

                if (animationId) {
                    cancelAnimationFrame(animationId);
                }

                if (heroSection) {
                    heroSection.removeEventListener('mousemove', handleMouseMove);
                    heroSection.removeEventListener('mouseleave', handleMouseLeave);
                }

                window.removeEventListener('resize', handleResize);

                if (elementsData) {
                    elementsData.forEach(data => {
                        if (data.element) {
                            data.element.style.filter = '';
                            data.element.style.transform = '';
                            data.element.style.transition = '';
                        }
                    });
                }

                this.animationState = null;
            }
        }
    };
</script>

@code {
    private readonly List<FloatingElement> _floatingElements = new();
    private bool _disposed = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GenerateFloatingElements();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Wait a bit for the DOM to be fully ready
                await Task.Delay(100);

                // Initialize the animation
                var result = await JsRuntime.InvokeAsync<bool>("heroAnimation.init");

                if (result)
                {
                    Console.WriteLine("✅ Animation started successfully");
                }
                else
                {
                    Console.WriteLine("❌ Animation failed to start");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing animation: {ex.Message}");
            }
        }
    }

    private void GenerateFloatingElements()
    {
        var random = new Random();
        var svgIcons = GetSvgIcons();
        var sizes = new[] { "w-6 h-6", "w-7 h-7", "w-8 h-8", "w-10 h-10" };
        var opacities = new[] { "opacity-20" };
        var colors = new[] { "text-gray-300" };

        for (int i = 0; i < 50; i++)
        {
            _floatingElements.Add(new FloatingElement
            {
                Top = random.Next(5, 95),
                Left = random.Next(5, 95),
                SvgPath = svgIcons[random.Next(svgIcons.Count)],
                SizeClass = sizes[random.Next(sizes.Length)],
                OpacityClass = opacities[random.Next(opacities.Length)],
                ColorClass = colors[random.Next(colors.Length)]
            });
        }
    }

    private List<string> GetSvgIcons()
    {
        return new List<string>
        {
            // 🎵 Music Icons
            """<ellipse cx="7" cy="17" rx="2" ry="1.5" stroke="currentColor" stroke-width="1.5" fill="currentColor"/><path stroke="currentColor" stroke-width="1.5" stroke-linecap="round" d="M9 17V6l7-2v11"/><ellipse cx="14" cy="15" rx="2" ry="1.5" stroke="currentColor" stroke-width="1.5" fill="currentColor"/>""",

            // 📷 Camera Icons
            """<path stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" fill="none" d="M14.5 4h-5L7 6H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-3l-2.5-2z"/><circle cx="12" cy="13" r="3" stroke="currentColor" stroke-width="1.5" fill="none"/>""",

            """<circle cx="12" cy="12" r="9" stroke="currentColor" stroke-width="1.5" fill="none"/><circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="1.5" fill="none"/><circle cx="16" cy="8" r="1" fill="currentColor"/>""",

            // 💻 Developer Icons
            """<path stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" fill="none" d="m18 16 4-4-4-4M6 8l-4 4 4 4"/>""",

            """<path stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" fill="none" d="M2 3h20v14H2z"/><path stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" fill="none" d="m8 21 4-4 4 4"/>""",

            // 🎨 Creative Icons
            """<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5" fill="none"/><path stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" fill="none" d="m14.31 8 5.74 9.94M9.69 8h11.48M7.38 12l5.74-9.94M9.69 16L3.95 6.06M14.31 16H2.83m13.79-4-5.74 9.94"/>""",

            """<path stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" fill="none" d="M12 2v20M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6"/>"""
        };
    }

    public async ValueTask DisposeAsync()
    {
        if (!_disposed)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("heroAnimation.cleanup");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error during cleanup: {ex.Message}");
            }

            _disposed = true;
        }
    }

    public class FloatingElement
    {
        public int Top { get; set; }
        public int Left { get; set; }
        public string SvgPath { get; set; } = "";
        public string SizeClass { get; set; } = "";
        public string OpacityClass { get; set; } = "";
        public string ColorClass { get; set; } = "";
    }
}