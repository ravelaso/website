@page "/dashboard/images"
@using website.Services
@layout Layout.DashboardLayout
@inject ImageService ImageService
@rendermode InteractiveServer

<PageTitle>Image Gallery - Dashboard</PageTitle>


<div class="space-y-6">
    <!-- Header -->
    <div class="bg-neutral-950 rounded-lg border border-neutral-800 p-6">
        <h2 class="text-xl font-semibold text-white">Image Gallery Management</h2>
        <p class="text-neutral-400">Upload and manage your image gallery</p>
    </div>

    <!-- Upload Panel -->
    <div class="bg-neutral-950 rounded-lg border border-neutral-800 p-6">
        <h3 class="text-lg font-medium text-white mb-4">Upload Images</h3>

        <div class="border-2 border-dashed border-neutral-700 rounded-lg p-6">
            <InputFile OnChange="HandleFileSelection"
                       multiple
                       accept="image/*"
                       class="block w-full text-sm text-neutral-300
                              file:mr-4 file:py-2 file:px-4
                              file:rounded-md file:border
                              file:border-neutral-700
                              file:bg-neutral-900 file:text-white
                              hover:file:bg-neutral-800" />
        </div>

        @if (_uploadQueue.Any())
        {
            @foreach (var entry in _uploadQueue)
            {
                <div class="bg-neutral-800 rounded px-3 py-2 mb-2 flex justify-between items-center">
                    <div>
                        <span class="text-neutral-200 text-sm">@entry.File.Name</span>
                        <span class="text-neutral-500 text-xs ml-2">(@(entry.File.Size) bytes)</span>
                    </div>
                    <div>
                        @switch (entry.Status)
                        {
                            case "Uploading":
                                <span class="text-yellow-400 text-xs animate-pulse">Uploading...</span>
                                break;
                            case "Success":
                                <span class="text-green-400 text-xs">Uploaded ✅</span>
                                break;
                            case "Error":
                                <span class="text-red-400 text-xs">Failed ❌</span>
                                break;
                            default:
                                <span class="text-neutral-500 text-xs">Waiting...</span>
                                break;
                        }
                    </div>
                </div>
            }
            <div class="mt-4">
                <button @onclick="UploadFiles"
                        disabled="@(!_uploadQueue.Any())"
                        class="bg-white text-black px-4 py-2 rounded text-sm hover:bg-neutral-200 transition">
                    Upload Files
                </button>
            </div>
        }

        @if (!string.IsNullOrEmpty(_message))
        {
            <div class="mt-4 p-3 rounded bg-neutral-800 text-white border border-neutral-700">
                @_message
            </div>
        }
    </div>

    <!-- Gallery Section -->
    <div class="bg-neutral-950 rounded-lg border border-neutral-800 p-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-white">Gallery Images (@_existingImages.Count)</h3>
            <button @onclick="RefreshGallery"
                    class="border border-neutral-700 text-white px-3 py-1 rounded text-sm hover:bg-neutral-800 transition">
                Refresh
            </button>
        </div>

        @if (_existingImages.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                @foreach (var image in _existingImages)
                {
                    <div class="bg-neutral-900 rounded-lg border border-neutral-800 overflow-hidden shadow-sm">
                        <div class="aspect-video bg-neutral-800 flex items-center justify-center">
                            @if (image.HasThumbnail)
                            {
                                <img src="/images/thumbs/@image.FileName"
                                     alt="@image.FileName"
                                     class="max-w-full max-h-full object-contain" />
                            }
                            else
                            {
                                <div class="text-neutral-500 text-sm">No thumbnail</div>
                            }
                        </div>

                        <div class="p-4">
                            <h4 class="text-white text-sm font-medium truncate mb-2">@image.FileName</h4>
                            <div class="text-neutral-500 text-xs space-y-1">
                                <div>Size: @image.FormattedFileSize</div>
                                <div>Created: @image.CreatedDate.ToString("MMM dd, yyyy")</div>
                            </div>

                            <div class="mt-3 flex gap-2">
                                <a href="/images/gallery/@image.FileName"
                                   target="_blank"
                                   class="border border-white text-white px-3 py-1 rounded text-xs hover:bg-white hover:text-black transition">
                                    View
                                </a>
                                <button @onclick="() => DeleteImage(image.FileName)"
                                        class="border border-red-500 text-red-500 px-3 py-1 rounded text-xs hover:bg-red-500 hover:text-white transition">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8 text-neutral-500">
                <p>No images in gallery yet. Upload some images above!</p>
            </div>
        }
    </div>
</div>


@code {
    private List<ImageInfo> _existingImages = [];
    private string _message = string.Empty;
    private List<UploadFileEntry> _uploadQueue = [];
    private class UploadFileEntry
    {
        public IBrowserFile File { get; init; } = null!;
        public string Status { get; set; } = "Pending"; // Pending, Uploading, Success, Error
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshGallery();
    }

    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        _uploadQueue = e.GetMultipleFiles(50)
            .Select(file => new UploadFileEntry { File = file })
            .ToList();
        _message = string.Empty;
    }

    private async Task UploadFiles()
    {
        try
        {
            var uploadedFiles = new List<string>();

            foreach (var entry in _uploadQueue)
            {
                entry.Status = "Uploading";
                StateHasChanged(); // refresh UI for this entry

                var success = await ImageService.UploadImageAsync(entry.File);

                entry.Status = success ? "Success" : "Error";
                StateHasChanged();

                if (success)
                    uploadedFiles.Add(entry.File.Name);
            }

            if (uploadedFiles.Any())
            {
                _message = "Files uploaded. Generating thumbnails...";
                await ImageService.GenerateAllThumbnailsAsync();
                _message = "All files uploaded and thumbnails generated!";
            }
            _uploadQueue.Clear();
            await RefreshGallery();
        }
        catch (Exception ex)
        {
            _message = $"Error: {ex.Message}";
        }
    }

    private async Task RefreshGallery()
    {
        _existingImages = await ImageService.GetAllImagesAsync();
        StateHasChanged();
    }

    private async Task DeleteImage(string fileName)
    {
        var success = await ImageService.DeleteImageAsync(fileName);
        if (success)
        {
            _message = $"Image '{fileName}' deleted successfully!";
            await RefreshGallery();
        }
        else
        {
            _message = $"Failed to delete image '{fileName}'";
        }
    }
}