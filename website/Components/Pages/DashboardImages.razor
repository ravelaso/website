@page "/dashboard/images"
@using Microsoft.AspNetCore.Components.Forms
@using website.Services
@layout Layout.DashboardLayout
@inject ImageService ImageService
@rendermode InteractiveServer

<PageTitle>Image Gallery - Dashboard</PageTitle>
<div class="space-y-6">
    <!-- Header -->
    <div class="bg-neutral-950 rounded-lg border border-neutral-800 p-6">
        <h2 class="text-xl font-semibold text-white">Image Gallery Management</h2>
        <p class="text-neutral-400">Upload and manage your image gallery</p>
    </div>

    <!-- Upload Panel -->
    <div class="bg-neutral-950 rounded-lg border border-neutral-800 p-6">
        <h3 class="text-lg font-medium text-white mb-4">Upload Images</h3>

        <div class="border-2 border-dashed border-neutral-700 rounded-lg p-6">
            <InputFile OnChange="HandleFileSelection"
                       multiple
                       accept="image/*"
                       class="block w-full text-sm text-neutral-300
                              file:mr-4 file:py-2 file:px-4
                              file:rounded-md file:border
                              file:border-neutral-700
                              file:bg-neutral-900 file:text-white
                              hover:file:bg-neutral-800" />
        </div>

        @if (_uploadQueue.Any())
        {
            <div class="mt-4 bg-neutral-900 border border-neutral-800 rounded-lg p-4">
                <h4 class="text-white font-medium mb-3">Selected Files (@_uploadQueue.Count)</h4>

                @foreach (var item in _uploadQueue)
                {
                    <div class="bg-neutral-800 rounded px-3 py-2 mb-2 flex justify-between items-center">
                        <div>
                            <span class="text-neutral-200 text-sm">@item.File.Name</span>
                            <span class="text-neutral-500 text-xs ml-2">(@item.File.Size bytes)</span>
                        </div>
                        <span class="text-xs @(item.Status.Contains("Failed") ? "text-red-400" : item.Status.Contains("Uploaded") ? "text-green-400" : "text-neutral-400")">
                            @item.Status
                        </span>
                    </div>
                }

                <div class="mt-4">
                    <button @onclick="UploadFiles"
                            disabled="@(!_uploadQueue.Any())"
                            class="bg-white text-black px-4 py-2 rounded text-sm hover:bg-neutral-200 transition">
                        Upload Files
                    </button>
                </div>
            </div>
        }


        @if (!string.IsNullOrEmpty(_message))
        {
            <div class="mt-4 p-3 rounded bg-neutral-800 text-white border border-neutral-700">
                @_message
            </div>
        }
    </div>

    <!-- Gallery Section -->
    <div class="bg-neutral-950 rounded-lg border border-neutral-800 p-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-medium text-white">Gallery Images (@_existingImages.Count)</h3>
            <button @onclick="RefreshGallery"
                    class="border border-neutral-700 text-white px-3 py-1 rounded text-sm hover:bg-neutral-800 transition">
                Refresh
            </button>
        </div>

        @if (_existingImages.Any())
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
                @foreach (var image in _existingImages)
                {
                    <div class="bg-neutral-900 rounded-lg border border-neutral-800 overflow-hidden shadow-sm">
                        <div class="aspect-video bg-neutral-800 flex items-center justify-center">
                            @if (image.HasThumbnail)
                            {
                                <img src="/images/thumbs/@image.FileName"
                                     alt="@image.FileName"
                                     class="max-w-full max-h-full object-contain" />
                            }
                            else
                            {
                                <div class="text-neutral-500 text-sm">No thumbnail</div>
                            }
                        </div>

                        <div class="p-4">
                            <h4 class="text-white text-sm font-medium truncate mb-2">@image.FileName</h4>
                            <div class="text-neutral-500 text-xs space-y-1">
                                <div>Size: @image.FormattedFileSize</div>
                                <div>Created: @image.CreatedDate.ToString("MMM dd, yyyy")</div>
                            </div>

                            <div class="mt-3 flex gap-2">
                                <a href="/images/gallery/@image.FileName"
                                   target="_blank"
                                   class="border border-white text-white px-3 py-1 rounded text-xs hover:bg-white hover:text-black transition">
                                    View
                                </a>
                                <button @onclick="() => DeleteImage(image.FileName)"
                                        class="border border-red-500 text-red-500 px-3 py-1 rounded text-xs hover:bg-red-500 hover:text-white transition">
                                    Delete
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="text-center py-8 text-neutral-500">
                <p>No images in gallery yet. Upload some images above!</p>
            </div>
        }
    </div>
</div>

@code {
    private List<IBrowserFile> _selectedFiles = new();
    private List<ImageInfo> _existingImages = new();
    private string _message = string.Empty;
    private const long MaxFileSize = 50 * 1024 * 1024; // 50 MB
    private record UploadItem(IBrowserFile File, string Status);
    private List<UploadItem> _uploadQueue = [];

    protected override async Task OnInitializedAsync()
    {
        await RefreshGallery();
    }

    private void HandleFileSelection(InputFileChangeEventArgs e)
    {
        try
        {
            var files = e.GetMultipleFiles(50).ToList();
            var oversizedFiles = new List<string>();

            _uploadQueue.Clear();

            foreach (var file in files)
            {
                if (file.Size <= MaxFileSize)
                    _uploadQueue.Add(new UploadItem(file, "Pending"));
                else
                    oversizedFiles.Add(file.Name);
            }

            _message = oversizedFiles.Count > 0
                ? $"These files exceed 50 MB and won't be uploaded: {string.Join(", ", oversizedFiles)}"
                : string.Empty;
        }
        catch
        {
            _uploadQueue.Clear();
            _message = "You can upload a maximum of 50 files at once.";
        }
    }
    private async Task UploadFiles()
    {
        if (!_uploadQueue.Any())
        {
            _message = "No valid files selected to upload.";
            return;
        }

        foreach (var (file, _) in _uploadQueue)
        {
            var item = _uploadQueue.First(f => f.File == file);
            var index = _uploadQueue.IndexOf(item);

            if (file.Size == 0)
            {
                _uploadQueue[index] = item with { Status = "Skipped (0 B)" };
                StateHasChanged();
                continue;
            }

            _uploadQueue[index] = item with { Status = "Uploading..." };
            StateHasChanged();

            try
            {
                await ImageService.UploadImageAsync(file);
                _uploadQueue[index] = item with { Status = "Uploaded ✅" };
            }
            catch (Exception ex)
            {
                _uploadQueue[index] = item with { Status = $"Failed ❌ ({ex.Message})" };
            }

            StateHasChanged();
            await Task.Delay(100); // Optional: smooth UI update
        }

        _message = "Upload process complete.";
        await RefreshGallery();
    }

    private async Task RefreshGallery()
    {
        _existingImages = await ImageService.GetAllImagesAsync();
        await ImageService.GenerateAllThumbnailsAsync();
        StateHasChanged();
    }

    private async Task DeleteImage(string fileName)
    {
        var success = await ImageService.DeleteImageAsync(fileName);
        if (success)
        {
            _message = $"Image '{fileName}' deleted successfully!";
            await RefreshGallery();
        }
        else
        {
            _message = $"Failed to delete image '{fileName}'";
        }
    }
}