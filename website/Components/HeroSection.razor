<section class="relative bg-black min-h-screen flex items-center justify-center overflow-hidden" id="hero-section">
    <!-- Background Pattern -->
    <div class="absolute inset-0 opacity-10 bg-gradient-to-r from-gray-900 to-gray-800">
        <div class="absolute inset-0" style="background-image: radial-gradient(circle at 2px 2px, white 1px, transparent 0); background-size: 80px 80px;"></div>
    </div>

    <!-- Floating Elements Container -->
    <div id="floating-elements" class="absolute inset-0 pointer-events-none">
        @foreach (var element in FloatingElements)
        {
            <div class="floating-element absolute @element.OpacityClass @element.ColorClass"
                 style="top: @(element.Top)%; left: @(element.Left)%; animation: @element.AnimationString;">
                <svg class="@element.SizeClass" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    @((MarkupString)element.SvgPath)
                </svg>
            </div>
        }
    </div>

    <div class="relative z-10 text-center px-4 sm:px-6 lg:px-8 max-w-6xl mx-auto">
        <!-- Main Title -->
        <div class="mb-16 text-center">
            <h1 class="text-6xl sm:text-7xl lg:text-8xl font-black text-white mb-8 tracking-tight">
                <span class="block font-extralight text-gray-300">ANDRES</span>
                <span class="block bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent">
                    RAVELO
                </span>
            </h1>

            <!-- Interactive Role Buttons -->
            <div class="flex flex-wrap justify-center gap-6 text-lg sm:text-xl font-medium mb-12">
                <a href="/music" class="group flex items-center px-6 py-3 rounded-full border-2 border-gray-600 hover:border-white transition-all duration-300 hover:bg-white/5">
                    <div class="w-10 h-10 mr-4 rounded-full border border-gray-500 group-hover:border-white flex items-center justify-center transition-all duration-300">
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-white transition-colors duration-300" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M18 3a1 1 0 00-1.196-.98l-10 2A1 1 0 006 5v9.114A4.369 4.369 0 005 14c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2V7.82l8-1.6v5.894A4.369 4.369 0 0015 12c-1.657 0-3 .895-3 2s1.343 2 3 2 3-.895 3-2V3z"/>
                        </svg>
                    </div>
                    <span class="text-gray-300 group-hover:text-white transition-colors duration-300">Musician</span>
                </a>

                <a href="/developer" class="group flex items-center px-6 py-3 rounded-full border-2 border-gray-600 hover:border-white transition-all duration-300 hover:bg-white/5">
                    <div class="w-10 h-10 mr-4 rounded-full border border-gray-500 group-hover:border-white flex items-center justify-center transition-all duration-300">
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-white transition-colors duration-300" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <span class="text-gray-300 group-hover:text-white transition-colors duration-300">Developer</span>
                </a>

                <a href="/photography" class="group flex items-center px-6 py-3 rounded-full border-2 border-gray-600 hover:border-white transition-all duration-300 hover:bg-white/5">
                    <div class="w-10 h-10 mr-4 rounded-full border border-gray-500 group-hover:border-white flex items-center justify-center transition-all duration-300">
                        <svg class="w-5 h-5 text-gray-400 group-hover:text-white transition-colors duration-300" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"/>
                        </svg>
                    </div>
                    <span class="text-gray-300 group-hover:text-white transition-colors duration-300">Photographer</span>
                </a>
            </div>
        </div>

        <!-- Description -->
        <p class="text-xl sm:text-2xl text-gray-400 mb-16 max-w-4xl mx-auto leading-relaxed font-light">
            Creative professional blending technology, music, and visual storytelling.<br class="hidden sm:block">
            <span class="text-gray-500">Passionate about building digital experiences, composing melodies, and capturing moments that matter.</span>
        </p>
    </div>

</section>


<script>
document.addEventListener('DOMContentLoaded', function() {
    const heroSection = document.getElementById('hero-section');
    const floatingElements = document.querySelectorAll('.floating-element');

    heroSection.addEventListener('mousemove', function(e) {
        const rect = heroSection.getBoundingClientRect();
        const mouseX = e.clientX - rect.left;
        const mouseY = e.clientY - rect.top;

        floatingElements.forEach(element => {
            const elementRect = element.getBoundingClientRect();
            const elementCenterX = elementRect.left + elementRect.width / 2 - rect.left;
            const elementCenterY = elementRect.top + elementRect.height / 2 - rect.top;

            const distanceX = mouseX - elementCenterX;
            const distanceY = mouseY - elementCenterY;
            const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);

            if (distance < 120) {
                const intensity = Math.max(0, (120 - distance) / 120);
                const glowSize = Math.round(intensity * 60);
                const opacity = intensity * 2;
                const brightness = 1 + intensity * 2;
                const scale = 1 + intensity * 0.3;

                // Ultra-bright, instant glow
                element.style.filter = `
                    drop-shadow(0 0 ${glowSize}px rgba(0, 150, 255, ${opacity}))
                    drop-shadow(0 0 ${glowSize * 1.5}px rgba(100, 200, 255, ${opacity * 0.8}))
                    brightness(${brightness})
                `;
                element.style.transform = `scale(${scale})`;
                // INSTANT transition in
                element.style.transition = 'none';
            } else {
                // Quick fade out
                element.style.filter = '';
                element.style.transform = '';
                element.style.transition = 'filter 0.15s ease-out, transform 0.15s ease-out';
            }
        });
    });

    heroSection.addEventListener('mouseleave', function() {
        floatingElements.forEach(element => {
            element.style.filter = '';
            element.style.transform = '';
            element.style.transition = 'filter 0.2s ease-out, transform 0.2s ease-out';
        });
    });
});
</script>


<style>
    .floating-element {
        will-change: transform;
    }

    /* Molecular movement animations */
    @@keyframes float-1 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(30px, -20px) rotate(360deg); }
    }

    @@keyframes float-2 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(-25px, 35px) rotate(-360deg); }
    }

    @@keyframes float-3 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(40px, 15px) rotate(180deg); }
    }

    @@keyframes float-4 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(-35px, -25px) rotate(-180deg); }
    }

    @@keyframes float-5 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(20px, 40px) rotate(270deg); }
    }

    @@keyframes float-6 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(-30px, -15px) rotate(-270deg); }
    }

    @@keyframes float-7 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(35px, -30px) rotate(90deg); }
    }

    @@keyframes float-8 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(-20px, 25px) rotate(-90deg); }
    }

    @@keyframes float-9 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(45px, 10px) rotate(450deg); }
    }

    @@keyframes float-10 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(-40px, -35px) rotate(-450deg); }
    }

    @@keyframes float-11 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(15px, -40px) rotate(135deg); }
    }

    @@keyframes float-12 {
        0% { transform: translate(0px, 0px) rotate(0deg); }
        100% { transform: translate(-45px, 20px) rotate(-135deg); }
    }
</style>

@code {
    private int ElementCount = 30; // Easy to configure!
    private List<FloatingElement> FloatingElements = new();

    protected override void OnInitialized()
    {
        GenerateFloatingElements();
    }

    private void GenerateFloatingElements()
    {
        var random = new Random();
        var svgIcons = GetSvgIcons();
        var sizes = new[] { "w-10 h-10", "w-15 h-15", "w-20 h-20", "w-25 h-25" };
        var opacities = new[] { "opacity-20" };
        var colors = new[] { "text-gray-300" };

        for (int i = 0; i < ElementCount; i++)
        {
            FloatingElements.Add(new FloatingElement
            {
                Top = random.Next(5, 95),
                Left = random.Next(5, 95),
                SvgPath = svgIcons[random.Next(svgIcons.Count)],
                SizeClass = sizes[random.Next(sizes.Length)],
                OpacityClass = opacities[random.Next(opacities.Length)],
                ColorClass = colors[random.Next(colors.Length)],
                AnimationIndex = random.Next(1, 13), // 12 different animations
                Duration = random.Next(8, 20), // 8-20 seconds
                DurationUnit = "s"
            });
        }
    }

    private List<string> GetSvgIcons()
{
    return new List<string>
    {
        // Music Icons
        """<path d="M21.65,2.24a1,1,0,0,0-.8-.23l-13,2A1,1,0,0,0,7,5V15.35A3.45,3.45,0,0,0,5.5,15,3.5,3.5,0,1,0,9,18.5V10.86L20,9.17v4.18A3.45,3.45,0,0,0,18.5,13,3.5,3.5,0,1,0,22,16.5V3A1,1,0,0,0,21.65,2.24ZM5.5,20A1.5,1.5,0,1,1,7,18.5,1.5,1.5,0,0,1,5.5,20Zm13-2A1.5,1.5,0,1,1,20,16.5,1.5,1.5,0,0,1,18.5,18ZM20,7.14,9,8.83v-3L20,4.17Z"/>""",

        // Code Icons
        """<path d="M4.708 5.578L2.061 8.224l2.647 2.646-.708.708-3-3V7.87l3-3 .708.708zm7-.708L11 5.578l2.647 2.646L11 10.87l.708.708 3-3V7.87l-3-3zM4.908 13l.894.448 5-10L9.908 3l-5 10z"/>""",

        // Camera Icons
        """<path fill="#444" d="M11 9c0 1.657-1.343 3-3 3s-3-1.343-3-3c0-1.657 1.343-3 3-3s3 1.343 3 3z"></path><path fill="#444" d="M11 4v-3h-6v3h-5v9h5c0.8 0.6 1.9 1 3 1s2.2-0.4 3-1h5v-9h-5zM6 2h4v2h-4v-2zM8 13c-2.2 0-4-1.8-4-4s1.8-4 4-4c2.2 0 4 1.8 4 4s-1.8 4-4 4zM15 6h-2v-1h2v1z"></path> """,

    };
}


    public class FloatingElement
    {
        public int Top { get; set; }
        public int Left { get; set; }
        public string SvgPath { get; set; } = "";
        public string SizeClass { get; set; } = "";
        public string OpacityClass { get; set; } = "";
        public string ColorClass { get; set; } = "";
        public int AnimationIndex { get; set; }
        public int Duration { get; set; }
        public string DurationUnit { get; set; } = "s";
        public string AnimationString => $"float-{AnimationIndex} {Duration}{DurationUnit} ease-in-out infinite alternate";

    }
}