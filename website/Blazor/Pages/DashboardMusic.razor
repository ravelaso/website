@page "/dashboard/music"
@using website.Models
@using website.Services
@layout Layout.DashboardLayout
@inject DataService DataService
@rendermode InteractiveServer

<PageTitle>Music Management - Dashboard</PageTitle>

<div class="bg-neutral-950 rounded-xl border border-neutral-800 p-6">
    <h2 class="text-2xl font-bold text-white mb-4">ðŸŽµ Music Projects</h2>
    <p class="text-neutral-400 mb-6">Add and manage your music projects below.</p>

    <!-- Add Project Form -->
    <div class="bg-neutral-900 border border-neutral-800 rounded-lg p-6 mb-10">
        <h3 class="text-white font-semibold text-lg mb-4">Add New Project</h3>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <input @bind="_newProject.Name" placeholder="Project Title"
                   class="bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 placeholder:text-neutral-500" />

            <input @bind="_newProject.Link" placeholder="Link (optional)"
                   class="bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 placeholder:text-neutral-500" />

            <textarea @bind="_newProject.Description" placeholder="Description"
                      class="col-span-2 bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 h-24 placeholder:text-neutral-500"></textarea>

            <input @bind="_newTags" placeholder="Tags (comma separated)"
                   class="col-span-2 bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 placeholder:text-neutral-500" />
        </div>

        <button @onclick="AddProject"
                class="mt-5 bg-white text-black hover:bg-neutral-200 font-medium px-5 py-2 rounded-md transition">
            âž• Add Project
        </button>
    </div>

    <!-- Project List -->
    @if (_musicProjects.Count == 0)
    {
        <p class="text-neutral-500">No projects added yet.</p>
    }
    else
    {
        <div class="grid md:grid-cols-2 gap-6">
            @foreach (var project in _musicProjects.OrderByDescending(p => p.Date))
            {
                <MusicCard musicData=@project IsDeletable=true OnDelete="PromptDelete"/>
            }
        </div>
    }
</div>

<DeletePopup T="MusicProject"
             Show="_showConfirmModal"
             ItemToDelete="_projectToDelete"
             OnConfirm="ConfirmDelete"
             OnCancel="CancelDelete" />


@code {
    private List<MusicProject> _musicProjects = [];
    private MusicProject _newProject = new();
    private string _newTags = string.Empty;
    private bool _showConfirmModal;
    private MusicProject? _projectToDelete;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var musicData = await DataService.LoadDataAsync<MusicData>("Music.json");
            _musicProjects = musicData.Projects;
        }
        catch
        {
            _musicProjects = [];
        }
    }

    private async Task AddProject()
    {
        if (!string.IsNullOrWhiteSpace(_newProject.Name))
        {
            _newProject.Id = Guid.NewGuid().ToString();
            _newProject.Date = DateTime.Now;
            _newProject.Tags = _newTags.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries).ToList();

            _musicProjects.Add(_newProject);

            await SaveData();

            // Reset form
            _newProject = new MusicProject();
            _newTags = string.Empty;
        }
    }

    private void PromptDelete(MusicProject project)
    {
        _projectToDelete = project;
        _showConfirmModal = true;
    }

    private async Task ConfirmDelete()
    {
        if (_projectToDelete is not null)
        {
            _musicProjects.Remove(_projectToDelete);
            await SaveData();
        }

        _projectToDelete = null;
        _showConfirmModal = false;
    }

    private void CancelDelete()
    {
        _projectToDelete = null;
        _showConfirmModal = false;
    }

    private async Task SaveData()
    {
        var musicData = new MusicData { Projects = _musicProjects };
        await DataService.SaveDataAsync("Music.json", musicData);
    }
}
