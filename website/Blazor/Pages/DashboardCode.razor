@page "/dashboard/code"
@using website.Models
@using website.Services
@layout Layout.DashboardLayout
@inject DataService DataService
@inject NotificationService NotificationService
@rendermode InteractiveServer


<PageTitle>Code Management - Dashboard</PageTitle>

<div class="bg-neutral-950 rounded-xl border border-neutral-800 p-6">
    <h2 class="text-2xl font-bold text-white mb-4"> ðŸ’» Code Projects</h2>
    <p class="text-neutral-400 mb-6">Add and manage your software projects below.</p>

    <!-- Add/Edit Project Form -->
    <div class="bg-neutral-900 border border-neutral-800 rounded-lg p-6 mb-10">
        <h3 class="text-white font-semibold text-lg mb-4">
            @(_isEditing ? "Edit Project" : "Add New Project")
        </h3>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <input @bind="_newProject.Name" placeholder="Project Title"
                   class="bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 placeholder:text-neutral-500 w-full" />

            <input @bind="_newProject.GitHubLink" placeholder="GitHub Link (optional)"
                   class="bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 placeholder:text-neutral-500 w-full" />

            <input @bind="_newProject.DemoLink" placeholder="Demo Link (optional)"
                   class="bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 placeholder:text-neutral-500 w-full" />

            <textarea @bind="_newProject.Description" placeholder="Description"
                      class="col-span-2 bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 h-24 placeholder:text-neutral-500 w-full"></textarea>

            <input @bind="_newTechnologies" placeholder="Technologies (comma separated)"
                   class="col-span-2 bg-neutral-950 text-white border border-neutral-700 rounded-md px-4 py-2 placeholder:text-neutral-500 w-full" />
        </div>

        <button @onclick="AddProject"
                class="mt-5 bg-white text-black hover:bg-neutral-200 font-medium px-5 py-2 rounded-md transition">
            @(_isEditing ? "ðŸ’¾ Save Changes" : "âž• Add Project")
        </button>
    </div>

    <!-- Project List -->
    @if (_codeProjects.Count == 0)
    {
        <p class="text-neutral-500">No projects added yet.</p>
    }
    else
    {
        <div class="grid md:grid-cols-2 gap-6">
            @foreach (var project in _codeProjects.OrderByDescending(p => p.Date))
            {
                <CodeCard CodeData="@project"
                          IsDeletable="true"
                          OnDelete="PromptDelete"
                          OnEdit="EditProject" />
            }
        </div>
    }
</div>


<DeletePopup T="CodeProject"
             Show="_showConfirmModal"
             ItemToDelete="_projectToDelete"
             OnConfirm="ConfirmDelete"
             OnCancel="CancelDelete" />


@code {
    private List<CodeProject> _codeProjects = [];
    private CodeProject _newProject = new();
    private string _newTechnologies = string.Empty;
    private bool _showConfirmModal;
    private CodeProject? _projectToDelete;
    private bool _isEditing;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _codeProjects = await DataService.LoadCodeProjectsAsync();
        }
        catch
        {
            _codeProjects = [];
        }
    }

    private async Task AddProject()
    {
        if (!string.IsNullOrWhiteSpace(_newProject.Name))
        {
            _newProject.Date = DateTime.Now;
            _newProject.Technologies = _newTechnologies
                .Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries)
                .ToList();

            if (!_isEditing)
            {
                _newProject.Id = Guid.NewGuid().ToString();
            }
            else
            {
                // Replace the existing project with matching Id
                var existing = _codeProjects.FirstOrDefault(p => p.Id == _newProject.Id);
                if (existing != null)
                {
                    _codeProjects.Remove(existing);
                }
            }

            _codeProjects.Add(_newProject);
            await SaveData();
            // Reset form
            _isEditing = false;
            _newProject = new();
            _newTechnologies = string.Empty;
        }
    }

    private void EditProject(CodeProject project)
    {
        _newProject = new CodeProject
        {
            Id = project.Id,
            Name = project.Name,
            Description = project.Description,
            GitHubLink = project.GitHubLink,
            DemoLink = project.DemoLink,
            Date = project.Date,
            Technologies = new List<string>(project.Technologies)
        };
        _newTechnologies = string.Join(", ", project.Technologies);
        _isEditing = true;
    }

    private void PromptDelete(CodeProject project)
    {
        _projectToDelete = project;
        _showConfirmModal = true;
    }

    private async Task ConfirmDelete()
    {
        if (_projectToDelete is not null)
        {
            await DataService.DeleteCodeProjectAsync(_projectToDelete.Id!); // Delete from database
            _codeProjects.Remove(_projectToDelete); // Update local list
            _ = NotificationService.ShowSuccess($"Code Project Deleted:\r {_projectToDelete.Id}");
        }
        _projectToDelete = null;
        _showConfirmModal = false;
    }

    private void CancelDelete()
    {
        _projectToDelete = null;
        _showConfirmModal = false;
    }

    private async Task SaveData()
    {
        try
        {
            await DataService.AddOrUpdateCodeProjectAsync(_newProject);
            _ = NotificationService.ShowSuccess(!_isEditing
                ? $"Code Project Added:\n {_newProject.Id}"
                : $"Code Project Edited:\n {_newProject.Id}");
        }
        catch (Exception e)
        {
            _ = NotificationService.ShowError(e.Message);
        }
    }
}